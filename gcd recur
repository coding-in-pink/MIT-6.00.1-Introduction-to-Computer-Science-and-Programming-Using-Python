"""

Exercise: gcd recur

5.0/5.0 points (graded)

ESTIMATED TIME TO COMPLETE: 6 minutes

The greatest common divisor of two positive integers is the largest integer that divides each of them without remainder. For example,

gcd(2, 12) = 2

gcd(6, 12) = 6

gcd(9, 12) = 3

gcd(17, 12) = 1

A clever mathematical trick (due to Euclid) makes it easy to find greatest common divisors. 
Suppose that a and b are two positive integers:

If b = 0, then the answer is a

Otherwise, gcd(a, b) is the same as gcd(b, a % b)

See this website for an example of Euclid's algorithm being used to find the gcd.

Write a function gcdRecur(a, b) that implements this idea recursively. This function takes in two positive integers and returns 
one integer.
"""

# My code:

def gcdRecur(a, b):
    '''
    a, b: positive integers
    
    returns: a positive integer, the greatest common divisor of a & b.
    '''
   # Base case is when b = 0
    if b == 0:
        return a

    # Recursive case
    return gcdRecur(b, a % b)
    
    
    # Test numbers are:
    
    #Test: gcdRecur(96, 80)     output:16
    #Test: gcdRecur(28, 22      output:2
    #Test: gcdRecur(91, 143     ouput:13
    #Test: gcdRecur(216, 252)   output:36
    #Test: gcdRecur(247, 104)   ouput:13
    #Test: gcdRecur(138, 18)    output:6
    #Test: gcdRecur(20, 85)     output:5
    #Test: gcdRecur(30, 270)    output:30
    #Test: gcdRecur(156, 221)   output:13
    #Test: gcdRecur(48, 192)    output:48
    
    # Passed all test numbers. Running successfully!
