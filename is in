"""

Exercise: is in

5.0/5.0 points (graded)

ESTIMATED TIME TO COMPLETE: 18 minutes

We can use the idea of bisection search to determine if a character is in a string, so long as the string is sorted in alphabetical order.

First, test the middle character of a string against the character you're looking for (the "test character"). If they are the same,
we are done - we've found the character we're looking for!

If they're not the same, check if the test character is "smaller" than the middle character. If so, we need only consider the lower 
half of the string; otherwise, we only consider the upper half of the string. (Note that you can compare characters 
using Python's < function.)

Implement the function isIn(char, aStr) which implements the above idea recursively to test if char is in aStr. 
char will be a single character and aStr will be a string that is in alphabetical order. The function should return a boolean value.

As you design the function, think very carefully about what the base cases should be.
"""

# My code:

def isIn(char, aStr):
    '''
    char: a single character
    aStr: an alphabetized string
    
    returns: True if char is in aStr; False otherwise
    '''
    # Base case: Check for empty string
    if aStr == '':  
        return False
        
    # Base case: See if the character in the middle of aStr equals the test character 
    
    m = aStr[len(aStr) // 2]
    if char == m:
       return True
       
    # Base case: if aStr is of length 1, just see if the chars are equal
    
    elif len(aStr) == 1:
        return False
        
    # Recursive case: If the test character is smaller than the middle character, recursively search on the first half of aStr
    else:
       if char < m:
           return isIn(char, aStr[:len(aStr) // 2])
           
    # Otherwise the test character is larger than the middle character,so recursively search on the last half of aStr
       elif char > m:
           return isIn(char, aStr[len(aStr) // 2:])
           
    return isIn(char, aStr)
 
 
# Test inputs are:

#Test: isIn('a', '')    output:False
#Test: isIn('z', 'acehijllmopsxxyzzz')    output:True
#Test: isIn('h', 'cghhjkoryzz')           output:True
#Test: isIn('l', 'aadfjklnsuwxxz')        output:True
#Test: isIn('o', 'ccdefhimoqqs')          output:True
#Test: isIn('t', 'abeeeggijjjjmnnrttu')   output:True
#Test: isIn('b', 'jopqswxyz')             output:False
#Test: isIn('x', 'jjqtuuvxzzzz')          output:True
#Test: isIn('s', 'acdefgggjkmoprswxzzz')  output:True
#Test: isIn('g', 'abennnopsuuwwz')        output:False

# Passed all test inputs. Running successfully!





